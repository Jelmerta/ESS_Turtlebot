"""Implementation of statechart model.
Generated by YAKINDU Statechart Tools code generator.
"""

import queue
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

class Model:
	"""Implementation of the state machine Model.
	"""

	class State:
		""" State Enum
		"""
		(
			robot_control_awaiting_input,
			robot_control_automatic_mode,
			robot_control_automatic_mode_start_pos_set_zero_find_origin,
			robot_control_automatic_mode_start_pos_set_zero_rotate_towards_center_of_cell,
			robot_control_automatic_mode_start_pos_set_zero_move_towards_center_of_cell,
			robot_control_automatic_mode_start_pos_set_zero_done_,
			robot_control_automatic_mode_start_pos_set_zero_keep_distance_from_wall,
			robot_control_automatic_mode_start_pos_set_zero_move_towards_wall,
			robot_control_automatic_mode_start_pos_set_zero_move_forward_a_bit,
			robot_control_automatic_mode_start_pos_set_zero_realign,
			robot_control_automatic_mode_start_pos_set_zero_drive_forward,
			robot_control_automatic_mode_start_pos_set_zero_realign_right,
			null_state
		) = range(13)
	
	
	class UserVar:
		"""Implementation of scope UserVar.
		"""
		
		def __init__(self, statemachine):
			self.limit_degree_high = None
			self.limit_degree_low = None
			self.base_speed = None
			self.base_rotation = None
			self.turn_type = None
			self.limit_type = None
			self.xrow = None
			self.ycol = None
			self.xabs = None
			self.yabs = None
			self.abs_dis = None
			self.startprocedure = None
			self.straight_offset = None
			self.aligned = None
			self.ave_off = None
			self.off_back = None
			self.straighten = None
			
			self.statemachine = statemachine
		
	
	class BaseValues:
		"""Implementation of scope BaseValues.
		"""
		
		def __init__(self, statemachine):
			self.max_speed = None
			self.max_rotation = None
			self.degrees_front = None
			self.degrees_right = None
			self.degrees_back = None
			self.degrees_left = None
			
			self.statemachine = statemachine
		
	
	class Output:
		"""Implementation of scope Output.
		"""
		
		def __init__(self, statemachine):
			self.speed = None
			self.rotation = None
			self.obstacles = None
			self.gems = None
			self.finish = None
			
			self.statemachine = statemachine
		
	
	class Grid:
		"""Implementation of scope Grid.
		"""
		
		def __init__(self, statemachine):
			self.update = None
			self.receive = None
			self.column = None
			self.row = None
			self.orientation = None
			self.visited = None
			self.wall_front = None
			self.wall_right = None
			self.wall_back = None
			self.wall_left = None
			self.grid_size = None
			self.max_col = None
			self.max_row = None
			
			self.statemachine = statemachine
		
	
	class StartPos:
		"""Implementation of scope StartPos.
		"""
		
		def __init__(self, statemachine):
			self.set_zero = None
			self.zero_x = None
			self.zero_y = None
			self.zero_south_degree = None
			self.laser_deg_offset = None
			
			self.statemachine = statemachine
		
	
	class Computer:
		"""Implementation of scope Computer.
		"""
		
		def __init__(self, statemachine):
			self.m_press = None
			self.w_press = None
			self.a_press = None
			self.s_press = None
			self.d_press = None
			self.x_press = None
			
			self.statemachine = statemachine
		
		def raise_m_press(self):
			"""Raise method for event m_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_m_press_call)
			self.statemachine.run_cycle()
		
		def __raise_m_press_call(self):
			"""Raise callback for event m_press.
			"""
			self.m_press = True
		
		def raise_w_press(self):
			"""Raise method for event w_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_w_press_call)
			self.statemachine.run_cycle()
		
		def __raise_w_press_call(self):
			"""Raise callback for event w_press.
			"""
			self.w_press = True
		
		def raise_a_press(self):
			"""Raise method for event a_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_a_press_call)
			self.statemachine.run_cycle()
		
		def __raise_a_press_call(self):
			"""Raise callback for event a_press.
			"""
			self.a_press = True
		
		def raise_s_press(self):
			"""Raise method for event s_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_s_press_call)
			self.statemachine.run_cycle()
		
		def __raise_s_press_call(self):
			"""Raise callback for event s_press.
			"""
			self.s_press = True
		
		def raise_d_press(self):
			"""Raise method for event d_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_d_press_call)
			self.statemachine.run_cycle()
		
		def __raise_d_press_call(self):
			"""Raise callback for event d_press.
			"""
			self.d_press = True
		
		def raise_x_press(self):
			"""Raise method for event x_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_x_press_call)
			self.statemachine.run_cycle()
		
		def __raise_x_press_call(self):
			"""Raise callback for event x_press.
			"""
			self.x_press = True
		
	
	class Imu:
		"""Implementation of scope Imu.
		"""
		
		def __init__(self, statemachine):
			self.pitch = None
			self.roll = None
			self.yaw = None
			
			self.statemachine = statemachine
		
	
	class Odom:
		"""Implementation of scope Odom.
		"""
		
		def __init__(self, statemachine):
			self.x = None
			self.y = None
			self.z = None
			
			self.statemachine = statemachine
		
	
	class LaserDistance:
		"""Implementation of scope LaserDistance.
		"""
		
		def __init__(self, statemachine):
			self.d0 = None
			self.d90 = None
			self.d180 = None
			self.dm90 = None
			self.dmin = None
			self.min_deg = None
			self.dmax = None
			self.max_deg = None
			self.dmean = None
			self.dfront_min = None
			self.min_deg_f = None
			self.dfront_max = None
			self.max_deg_f = None
			self.dfront_mean = None
			self.dright_min = None
			self.min_deg_r = None
			self.dright_max = None
			self.max_deg_r = None
			self.dright_mean = None
			self.dback_min = None
			self.min_deg_b = None
			self.dback_max = None
			self.max_deg_b = None
			self.dback_mean = None
			self.dleft_min = None
			self.min_deg_l = None
			self.dleft_max = None
			self.max_deg_l = None
			self.dleft_mean = None
			
			self.statemachine = statemachine
		
	
	class LaserIntensity:
		"""Implementation of scope LaserIntensity.
		"""
		
		def __init__(self, statemachine):
			self.i0 = None
			self.i90 = None
			self.i180 = None
			self.im90 = None
			self.ifront_min = None
			self.ifront_max = None
			self.ifront_mean = None
			self.iright_min = None
			self.iright_max = None
			self.iright_mean = None
			self.iback_min = None
			self.iback_max = None
			self.iback_mean = None
			self.ileft_min = None
			self.ileft_max = None
			self.ileft_mean = None
			
			self.statemachine = statemachine
		
	
	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc. 
		"""
		self.user_var = Model.UserVar(self)
		self.base_values = Model.BaseValues(self)
		self.output = Model.Output(self)
		self.grid = Model.Grid(self)
		self.start_pos = Model.StartPos(self)
		self.computer = Model.Computer(self)
		self.imu = Model.Imu(self)
		self.odom = Model.Odom(self)
		self.laser_distance = Model.LaserDistance(self)
		self.laser_intensity = Model.LaserIntensity(self)
		
		self.in_event_queue = queue.Queue()
		# enumeration of all states:
		self.__State = Model.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 1
		for __state_index in range(1):
			self.__state_vector[__state_index] = self.State.null_state
		
		# for timed statechart:
		self.timer_service = None
		self.__time_events = [None] * 4
		
		# initializations:
		self.user_var.limit_degree_high = 0.0
		self.user_var.limit_degree_low = 0.0
		self.user_var.base_speed = 0.05
		self.user_var.base_rotation = 0.2
		self.user_var.turn_type = 0
		self.user_var.limit_type = 0
		self.user_var.xrow = 0
		self.user_var.ycol = 0
		self.user_var.xabs = 0
		self.user_var.yabs = 0
		self.user_var.abs_dis = 0
		self.user_var.startprocedure = True
		self.user_var.straight_offset = 0.0
		self.user_var.aligned = False
		self.user_var.ave_off = 0
		self.user_var.off_back = 0
		self.user_var.straighten = False
		self.base_values.max_speed = 0.22
		self.base_values.max_rotation = 2.84
		self.base_values.degrees_front = 10
		self.base_values.degrees_right = 10
		self.base_values.degrees_back = 10
		self.base_values.degrees_left = 10
		self.output.speed = 0.0
		self.output.rotation = 0.0
		self.output.obstacles = 0
		self.output.gems = 0
		self.output.finish = 0
		self.grid.update = False
		self.grid.receive = False
		self.grid.column = 0
		self.grid.row = 0
		self.grid.orientation = 0
		self.grid.visited = False
		self.grid.wall_front = 0
		self.grid.wall_right = 0
		self.grid.wall_back = 0
		self.grid.wall_left = 0
		self.grid.grid_size = 0.51
		self.grid.max_col = 3
		self.grid.max_row = 3
		self.start_pos.set_zero = False
		self.start_pos.zero_x = 0.0
		self.start_pos.zero_y = 0.0
		self.start_pos.zero_south_degree = 0.0
		self.start_pos.laser_deg_offset = 0
		self.imu.pitch = 0.0
		self.imu.roll = 0.0
		self.imu.yaw = 0.0
		self.odom.x = 0.0
		self.odom.y = 0.0
		self.odom.z = 0.0
		self.laser_distance.d0 = 0.0
		self.laser_distance.d90 = 0.0
		self.laser_distance.d180 = 0.0
		self.laser_distance.dm90 = 0.0
		self.laser_distance.dmin = 0.0
		self.laser_distance.min_deg = 0
		self.laser_distance.dmax = 0.0
		self.laser_distance.max_deg = 0
		self.laser_distance.dmean = 0.0
		self.laser_distance.dfront_min = 0.0
		self.laser_distance.min_deg_f = 0
		self.laser_distance.dfront_max = 0.0
		self.laser_distance.max_deg_f = 0
		self.laser_distance.dfront_mean = 0.0
		self.laser_distance.dright_min = 0.0
		self.laser_distance.min_deg_r = 0
		self.laser_distance.dright_max = 0.0
		self.laser_distance.max_deg_r = 0
		self.laser_distance.dright_mean = 0.0
		self.laser_distance.dback_min = 0.0
		self.laser_distance.min_deg_b = 0
		self.laser_distance.dback_max = 0.0
		self.laser_distance.max_deg_b = 0
		self.laser_distance.dback_mean = 0.0
		self.laser_distance.dleft_min = 0.0
		self.laser_distance.min_deg_l = 0
		self.laser_distance.dleft_max = 0.0
		self.laser_distance.max_deg_l = 0
		self.laser_distance.dleft_mean = 0.0
		self.laser_intensity.i0 = 0.0
		self.laser_intensity.i90 = 0.0
		self.laser_intensity.i180 = 0.0
		self.laser_intensity.im90 = 0.0
		self.laser_intensity.ifront_min = 0.0
		self.laser_intensity.ifront_max = 0.0
		self.laser_intensity.ifront_mean = 0.0
		self.laser_intensity.iright_min = 0.0
		self.laser_intensity.iright_max = 0.0
		self.laser_intensity.iright_mean = 0.0
		self.laser_intensity.iback_min = 0.0
		self.laser_intensity.iback_max = 0.0
		self.laser_intensity.iback_mean = 0.0
		self.laser_intensity.ileft_min = 0.0
		self.laser_intensity.ileft_max = 0.0
		self.laser_intensity.ileft_mean = 0.0
		self.__is_executing = False
	
	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state
	
	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False
			
	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.robot_control_awaiting_input:
			return self.__state_vector[0] == self.__State.robot_control_awaiting_input
		if s == self.__State.robot_control_automatic_mode:
			return (self.__state_vector[0] >= self.__State.robot_control_automatic_mode)\
				and (self.__state_vector[0] <= self.__State.robot_control_automatic_mode_start_pos_set_zero_realign_right)
		if s == self.__State.robot_control_automatic_mode_start_pos_set_zero_find_origin:
			return self.__state_vector[0] == self.__State.robot_control_automatic_mode_start_pos_set_zero_find_origin
		if s == self.__State.robot_control_automatic_mode_start_pos_set_zero_rotate_towards_center_of_cell:
			return self.__state_vector[0] == self.__State.robot_control_automatic_mode_start_pos_set_zero_rotate_towards_center_of_cell
		if s == self.__State.robot_control_automatic_mode_start_pos_set_zero_move_towards_center_of_cell:
			return self.__state_vector[0] == self.__State.robot_control_automatic_mode_start_pos_set_zero_move_towards_center_of_cell
		if s == self.__State.robot_control_automatic_mode_start_pos_set_zero_done_:
			return self.__state_vector[0] == self.__State.robot_control_automatic_mode_start_pos_set_zero_done_
		if s == self.__State.robot_control_automatic_mode_start_pos_set_zero_keep_distance_from_wall:
			return self.__state_vector[0] == self.__State.robot_control_automatic_mode_start_pos_set_zero_keep_distance_from_wall
		if s == self.__State.robot_control_automatic_mode_start_pos_set_zero_move_towards_wall:
			return self.__state_vector[0] == self.__State.robot_control_automatic_mode_start_pos_set_zero_move_towards_wall
		if s == self.__State.robot_control_automatic_mode_start_pos_set_zero_move_forward_a_bit:
			return self.__state_vector[0] == self.__State.robot_control_automatic_mode_start_pos_set_zero_move_forward_a_bit
		if s == self.__State.robot_control_automatic_mode_start_pos_set_zero_realign:
			return self.__state_vector[0] == self.__State.robot_control_automatic_mode_start_pos_set_zero_realign
		if s == self.__State.robot_control_automatic_mode_start_pos_set_zero_drive_forward:
			return self.__state_vector[0] == self.__State.robot_control_automatic_mode_start_pos_set_zero_drive_forward
		if s == self.__State.robot_control_automatic_mode_start_pos_set_zero_realign_right:
			return self.__state_vector[0] == self.__State.robot_control_automatic_mode_start_pos_set_zero_realign_right
		return False
		
	def time_elapsed(self, event_id):
		"""Add time events to in event queue
		"""
		if event_id in range(4):
			self.in_event_queue.put(lambda: self.raise_time_event(event_id))
			self.run_cycle()
	
	def raise_time_event(self, event_id):
		"""Raise timed events using the event_id.
		"""
		self.__time_events[event_id] = True
	
	def __execute_queued_event(self, func):
		func()
	
	def __get_next_event(self):
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None
	
	def __entry_action_robot_control_automatic_mode__start_pos_set_zero__find_origin(self):
		"""Entry action for state 'Find origin'..
		"""
		self.output.speed = 0.1
		self.output.rotation = 0.0
		
	def __entry_action_robot_control_automatic_mode__start_pos_set_zero__rotate_towards_center_of_cell(self):
		"""Entry action for state 'Rotate towards center of cell'..
		"""
		self.output.rotation = -0.2
		self.output.speed = 0.0
		
	def __entry_action_robot_control_automatic_mode__start_pos_set_zero__move_towards_center_of_cell(self):
		"""Entry action for state 'Move towards center of cell'..
		"""
		self.output.rotation = 0.0
		self.output.speed = 0.1
		
	def __entry_action_robot_control_automatic_mode__start_pos_set_zero__done_(self):
		"""Entry action for state 'Done?'..
		"""
		self.output.speed = 0.0
		self.start_pos.set_zero = True
		
	def __entry_action_robot_control_automatic_mode__start_pos_set_zero__keep_distance_from_wall(self):
		"""Entry action for state 'Keep distance from wall'..
		"""
		self.timer_service.set_timer(self, 0, 1000, False)
		self.output.speed = -0.1
		self.output.rotation = -0.3
		
	def __entry_action_robot_control_automatic_mode__start_pos_set_zero__move_towards_wall(self):
		"""Entry action for state 'Move towards wall'..
		"""
		self.timer_service.set_timer(self, 1, 100, False)
		self.output.speed = 0.1
		self.output.rotation = 0.05
		
	def __entry_action_robot_control_automatic_mode__start_pos_set_zero__move_forward_a_bit(self):
		"""Entry action for state 'Move forward a bit'..
		"""
		self.timer_service.set_timer(self, 2, 1500, False)
		self.output.rotation = -0.0
		self.output.speed = 0.1
		
	def __entry_action_robot_control_automatic_mode__start_pos_set_zero__realign(self):
		"""Entry action for state 'Realign'..
		"""
		self.output.speed = 0.0
		self.output.rotation = 0.3
		
	def __entry_action_robot_control_automatic_mode__start_pos_set_zero__drive_forward(self):
		"""Entry action for state 'Drive forward'..
		"""
		self.timer_service.set_timer(self, 3, 100, False)
		self.output.speed = 0.1
		self.output.rotation = 0.0
		
	def __entry_action_robot_control_automatic_mode__start_pos_set_zero__realign_right(self):
		"""Entry action for state 'RealignRight'..
		"""
		self.output.speed = 0.0
		self.output.rotation = -0.3
		
	def __exit_action_robot_control_automatic_mode__start_pos_set_zero__keep_distance_from_wall(self):
		"""Exit action for state 'Keep distance from wall'..
		"""
		self.timer_service.unset_timer(self, 0)
		
	def __exit_action_robot_control_automatic_mode__start_pos_set_zero__move_towards_wall(self):
		"""Exit action for state 'Move towards wall'..
		"""
		self.timer_service.unset_timer(self, 1)
		
	def __exit_action_robot_control_automatic_mode__start_pos_set_zero__move_forward_a_bit(self):
		"""Exit action for state 'Move forward a bit'..
		"""
		self.timer_service.unset_timer(self, 2)
		
	def __exit_action_robot_control_automatic_mode__start_pos_set_zero__drive_forward(self):
		"""Exit action for state 'Drive forward'..
		"""
		self.timer_service.unset_timer(self, 3)
		
	def __enter_sequence_robot_control_awaiting_input_default(self):
		"""'default' enter sequence for state Awaiting input.
		"""
		self.__state_vector[0] = self.State.robot_control_awaiting_input
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_robot_control_automatic_mode_default(self):
		"""'default' enter sequence for state Automatic mode.
		"""
		self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__default()
		
	def __enter_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin_default(self):
		"""'default' enter sequence for state Find origin.
		"""
		self.__entry_action_robot_control_automatic_mode__start_pos_set_zero__find_origin()
		self.__state_vector[0] = self.State.robot_control_automatic_mode_start_pos_set_zero_find_origin
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_robot_control_automatic_mode__start_pos_set_zero__rotate_towards_center_of_cell_default(self):
		"""'default' enter sequence for state Rotate towards center of cell.
		"""
		self.__entry_action_robot_control_automatic_mode__start_pos_set_zero__rotate_towards_center_of_cell()
		self.__state_vector[0] = self.State.robot_control_automatic_mode_start_pos_set_zero_rotate_towards_center_of_cell
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_robot_control_automatic_mode__start_pos_set_zero__move_towards_center_of_cell_default(self):
		"""'default' enter sequence for state Move towards center of cell.
		"""
		self.__entry_action_robot_control_automatic_mode__start_pos_set_zero__move_towards_center_of_cell()
		self.__state_vector[0] = self.State.robot_control_automatic_mode_start_pos_set_zero_move_towards_center_of_cell
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_robot_control_automatic_mode__start_pos_set_zero__done__default(self):
		"""'default' enter sequence for state Done?.
		"""
		self.__entry_action_robot_control_automatic_mode__start_pos_set_zero__done_()
		self.__state_vector[0] = self.State.robot_control_automatic_mode_start_pos_set_zero_done_
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_robot_control_automatic_mode__start_pos_set_zero__keep_distance_from_wall_default(self):
		"""'default' enter sequence for state Keep distance from wall.
		"""
		self.__entry_action_robot_control_automatic_mode__start_pos_set_zero__keep_distance_from_wall()
		self.__state_vector[0] = self.State.robot_control_automatic_mode_start_pos_set_zero_keep_distance_from_wall
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_robot_control_automatic_mode__start_pos_set_zero__move_towards_wall_default(self):
		"""'default' enter sequence for state Move towards wall.
		"""
		self.__entry_action_robot_control_automatic_mode__start_pos_set_zero__move_towards_wall()
		self.__state_vector[0] = self.State.robot_control_automatic_mode_start_pos_set_zero_move_towards_wall
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_robot_control_automatic_mode__start_pos_set_zero__move_forward_a_bit_default(self):
		"""'default' enter sequence for state Move forward a bit.
		"""
		self.__entry_action_robot_control_automatic_mode__start_pos_set_zero__move_forward_a_bit()
		self.__state_vector[0] = self.State.robot_control_automatic_mode_start_pos_set_zero_move_forward_a_bit
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_robot_control_automatic_mode__start_pos_set_zero__realign_default(self):
		"""'default' enter sequence for state Realign.
		"""
		self.__entry_action_robot_control_automatic_mode__start_pos_set_zero__realign()
		self.__state_vector[0] = self.State.robot_control_automatic_mode_start_pos_set_zero_realign
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_robot_control_automatic_mode__start_pos_set_zero__drive_forward_default(self):
		"""'default' enter sequence for state Drive forward.
		"""
		self.__entry_action_robot_control_automatic_mode__start_pos_set_zero__drive_forward()
		self.__state_vector[0] = self.State.robot_control_automatic_mode_start_pos_set_zero_drive_forward
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_robot_control_automatic_mode__start_pos_set_zero__realign_right_default(self):
		"""'default' enter sequence for state RealignRight.
		"""
		self.__entry_action_robot_control_automatic_mode__start_pos_set_zero__realign_right()
		self.__state_vector[0] = self.State.robot_control_automatic_mode_start_pos_set_zero_realign_right
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_robot_control_default(self):
		"""'default' enter sequence for region Robot control.
		"""
		self.__react_robot_control__entry_default()
		
	def __enter_sequence_robot_control_automatic_mode__start_pos_set_zero__default(self):
		"""'default' enter sequence for region [startPos.setZero].
		"""
		self.__react_robot_control_automatic_mode__start_pos_set_zero___entry_default()
		
	def __exit_sequence_robot_control_awaiting_input(self):
		"""Default exit sequence for state Awaiting input.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_robot_control_automatic_mode(self):
		"""Default exit sequence for state Automatic mode.
		"""
		self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero_()
		
	def __exit_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin(self):
		"""Default exit sequence for state Find origin.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_robot_control_automatic_mode__start_pos_set_zero__rotate_towards_center_of_cell(self):
		"""Default exit sequence for state Rotate towards center of cell.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_robot_control_automatic_mode__start_pos_set_zero__move_towards_center_of_cell(self):
		"""Default exit sequence for state Move towards center of cell.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_robot_control_automatic_mode__start_pos_set_zero__done_(self):
		"""Default exit sequence for state Done?.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_robot_control_automatic_mode__start_pos_set_zero__keep_distance_from_wall(self):
		"""Default exit sequence for state Keep distance from wall.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_robot_control_automatic_mode__start_pos_set_zero__keep_distance_from_wall()
		
	def __exit_sequence_robot_control_automatic_mode__start_pos_set_zero__move_towards_wall(self):
		"""Default exit sequence for state Move towards wall.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_robot_control_automatic_mode__start_pos_set_zero__move_towards_wall()
		
	def __exit_sequence_robot_control_automatic_mode__start_pos_set_zero__move_forward_a_bit(self):
		"""Default exit sequence for state Move forward a bit.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_robot_control_automatic_mode__start_pos_set_zero__move_forward_a_bit()
		
	def __exit_sequence_robot_control_automatic_mode__start_pos_set_zero__realign(self):
		"""Default exit sequence for state Realign.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_robot_control_automatic_mode__start_pos_set_zero__drive_forward(self):
		"""Default exit sequence for state Drive forward.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_robot_control_automatic_mode__start_pos_set_zero__drive_forward()
		
	def __exit_sequence_robot_control_automatic_mode__start_pos_set_zero__realign_right(self):
		"""Default exit sequence for state RealignRight.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_robot_control(self):
		"""Default exit sequence for region Robot control.
		"""
		state = self.__state_vector[0]
		if state == self.State.robot_control_awaiting_input:
			self.__exit_sequence_robot_control_awaiting_input()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_find_origin:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_rotate_towards_center_of_cell:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__rotate_towards_center_of_cell()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_move_towards_center_of_cell:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__move_towards_center_of_cell()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_done_:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__done_()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_keep_distance_from_wall:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__keep_distance_from_wall()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_move_towards_wall:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__move_towards_wall()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_move_forward_a_bit:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__move_forward_a_bit()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_realign:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__realign()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_drive_forward:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__drive_forward()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_realign_right:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__realign_right()
		
	def __exit_sequence_robot_control_automatic_mode__start_pos_set_zero_(self):
		"""Default exit sequence for region [startPos.setZero].
		"""
		state = self.__state_vector[0]
		if state == self.State.robot_control_automatic_mode_start_pos_set_zero_find_origin:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_rotate_towards_center_of_cell:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__rotate_towards_center_of_cell()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_move_towards_center_of_cell:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__move_towards_center_of_cell()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_done_:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__done_()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_keep_distance_from_wall:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__keep_distance_from_wall()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_move_towards_wall:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__move_towards_wall()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_move_forward_a_bit:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__move_forward_a_bit()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_realign:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__realign()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_drive_forward:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__drive_forward()
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_realign_right:
			self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__realign_right()
		
	def __react_robot_control__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_robot_control_awaiting_input_default()
		
	def __react_robot_control_automatic_mode__start_pos_set_zero___entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin_default()
		
	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		return transitioned_before
	
	
	def __robot_control_awaiting_input_react(self, transitioned_before):
		"""Implementation of __robot_control_awaiting_input_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.computer.m_press:
				self.__exit_sequence_robot_control_awaiting_input()
				self.__enter_sequence_robot_control_automatic_mode_default()
				self.__react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			if self.computer.w_press:
				self.output.speed = self.output.speed + 0.1
			if self.computer.x_press:
				self.output.speed = self.output.speed - 0.1
			if self.computer.s_press:
				self.output.speed = 0.0
			if self.computer.a_press:
				self.output.rotation = self.output.rotation + 0.1
			if self.computer.d_press:
				self.output.rotation = self.output.rotation - 0.1
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after
	
	
	def __robot_control_automatic_mode_react(self, transitioned_before):
		"""Implementation of __robot_control_automatic_mode_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.computer.m_press:
				self.__exit_sequence_robot_control_automatic_mode()
				self.__enter_sequence_robot_control_awaiting_input_default()
				self.__react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after
	
	
	def __robot_control_automatic_mode__start_pos_set_zero__find_origin_react(self, transitioned_before):
		"""Implementation of __robot_control_automatic_mode__start_pos_set_zero__find_origin_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.imu.yaw > -0.5 and self.imu.yaw < 0.5 and self.laser_distance.d0 < (((0.51 + (0.48 / 2)) + 0.05)):
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__rotate_towards_center_of_cell_default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
			elif self.imu.yaw > -1.0 and self.imu.yaw < 1.0 and self.laser_distance.d0 > ((0.51) + ((0.48 / 2))) and self.laser_distance.dleft_min > 0.19 and self.laser_distance.dleft_min < 1.0:
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__drive_forward_default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
			elif self.imu.yaw < -2.0:
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__realign_default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
			elif self.imu.yaw > 2.0:
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__realign_right_default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
			elif self.laser_distance.dleft_min < 0.19:
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__keep_distance_from_wall_default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
			elif self.laser_distance.dleft_min > 0.32 and self.laser_distance.dleft_min < 1.0:
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__move_towards_wall_default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__robot_control_automatic_mode_react(transitioned_before)
		return transitioned_after
	
	
	def __robot_control_automatic_mode__start_pos_set_zero__rotate_towards_center_of_cell_react(self, transitioned_before):
		"""Implementation of __robot_control_automatic_mode__start_pos_set_zero__rotate_towards_center_of_cell_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.imu.yaw < -88.0:
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__rotate_towards_center_of_cell()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__move_towards_center_of_cell_default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__robot_control_automatic_mode_react(transitioned_before)
		return transitioned_after
	
	
	def __robot_control_automatic_mode__start_pos_set_zero__move_towards_center_of_cell_react(self, transitioned_before):
		"""Implementation of __robot_control_automatic_mode__start_pos_set_zero__move_towards_center_of_cell_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.laser_distance.dback_min > 0.2:
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__move_towards_center_of_cell()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__done__default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__robot_control_automatic_mode_react(transitioned_before)
		return transitioned_after
	
	
	def __robot_control_automatic_mode__start_pos_set_zero__done__react(self, transitioned_before):
		"""Implementation of __robot_control_automatic_mode__start_pos_set_zero__done__react function.
		"""
		transitioned_after = transitioned_before
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__robot_control_automatic_mode_react(transitioned_before)
		return transitioned_after
	
	
	def __robot_control_automatic_mode__start_pos_set_zero__keep_distance_from_wall_react(self, transitioned_before):
		"""Implementation of __robot_control_automatic_mode__start_pos_set_zero__keep_distance_from_wall_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__time_events[0]:
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__keep_distance_from_wall()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__move_forward_a_bit_default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__robot_control_automatic_mode_react(transitioned_before)
		return transitioned_after
	
	
	def __robot_control_automatic_mode__start_pos_set_zero__move_towards_wall_react(self, transitioned_before):
		"""Implementation of __robot_control_automatic_mode__start_pos_set_zero__move_towards_wall_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__time_events[1]:
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__move_towards_wall()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin_default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__robot_control_automatic_mode_react(transitioned_before)
		return transitioned_after
	
	
	def __robot_control_automatic_mode__start_pos_set_zero__move_forward_a_bit_react(self, transitioned_before):
		"""Implementation of __robot_control_automatic_mode__start_pos_set_zero__move_forward_a_bit_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__time_events[2]:
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__move_forward_a_bit()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin_default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__robot_control_automatic_mode_react(transitioned_before)
		return transitioned_after
	
	
	def __robot_control_automatic_mode__start_pos_set_zero__realign_react(self, transitioned_before):
		"""Implementation of __robot_control_automatic_mode__start_pos_set_zero__realign_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.imu.yaw > -0.5:
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__realign()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin_default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__robot_control_automatic_mode_react(transitioned_before)
		return transitioned_after
	
	
	def __robot_control_automatic_mode__start_pos_set_zero__drive_forward_react(self, transitioned_before):
		"""Implementation of __robot_control_automatic_mode__start_pos_set_zero__drive_forward_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__time_events[3]:
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__drive_forward()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin_default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__robot_control_automatic_mode_react(transitioned_before)
		return transitioned_after
	
	
	def __robot_control_automatic_mode__start_pos_set_zero__realign_right_react(self, transitioned_before):
		"""Implementation of __robot_control_automatic_mode__start_pos_set_zero__realign_right_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.imu.yaw < 0.5:
				self.__exit_sequence_robot_control_automatic_mode__start_pos_set_zero__realign_right()
				self.__enter_sequence_robot_control_automatic_mode__start_pos_set_zero__find_origin_default()
				self.__robot_control_automatic_mode_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__robot_control_automatic_mode_react(transitioned_before)
		return transitioned_after
	
	
	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.computer.m_press = False
		self.computer.w_press = False
		self.computer.a_press = False
		self.computer.s_press = False
		self.computer.d_press = False
		self.computer.x_press = False
		self.__time_events[0] = False
		self.__time_events[1] = False
		self.__time_events[2] = False
		self.__time_events[3] = False
	
	
	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		state = self.__state_vector[0]
		if state == self.State.robot_control_awaiting_input:
			self.__robot_control_awaiting_input_react(-1)
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_find_origin:
			self.__robot_control_automatic_mode__start_pos_set_zero__find_origin_react(-1)
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_rotate_towards_center_of_cell:
			self.__robot_control_automatic_mode__start_pos_set_zero__rotate_towards_center_of_cell_react(-1)
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_move_towards_center_of_cell:
			self.__robot_control_automatic_mode__start_pos_set_zero__move_towards_center_of_cell_react(-1)
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_done_:
			self.__robot_control_automatic_mode__start_pos_set_zero__done__react(-1)
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_keep_distance_from_wall:
			self.__robot_control_automatic_mode__start_pos_set_zero__keep_distance_from_wall_react(-1)
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_move_towards_wall:
			self.__robot_control_automatic_mode__start_pos_set_zero__move_towards_wall_react(-1)
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_move_forward_a_bit:
			self.__robot_control_automatic_mode__start_pos_set_zero__move_forward_a_bit_react(-1)
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_realign:
			self.__robot_control_automatic_mode__start_pos_set_zero__realign_react(-1)
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_drive_forward:
			self.__robot_control_automatic_mode__start_pos_set_zero__drive_forward_react(-1)
		elif state == self.State.robot_control_automatic_mode_start_pos_set_zero_realign_right:
			self.__robot_control_automatic_mode__start_pos_set_zero__realign_right_react(-1)
	
	
	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__micro_step()
			self.__clear_in_events()
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
			condition_0 = self.computer.m_press or self.computer.w_press or self.computer.a_press or self.computer.s_press or self.computer.d_press or self.computer.x_press or self.__time_events[0] or self.__time_events[1] or self.__time_events[2] or self.__time_events[3]
		self.__is_executing = False
	
	
	def enter(self):
		"""Implementation of enter function.
		"""
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__enter_sequence_robot_control_default()
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__exit_sequence_robot_control()
		self.__is_executing = False
	
	
	
